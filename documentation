CSC521 Operating system
Project:  	  myShell Program
Programmer:   Rob Miles
Professor:    Dr. Lee
File Created: October 10, 2018

======================
Project Description
======================

[description block]

	The Shell or Command Line Interpreter is the fundamental User interface to an Operating System.  This project is to write a simple shell that has the basic functionalities of such a shell.
    A shell is a terminal/text based program/application that takes text based user inputs and performs or executes some actions based on the command provided by the user.  Fully featured shells, like BASH or tcsh, can execute reasonably complex instructions that run macros or executables to perform various tasks on the user's computer.  For example, the shell can be used to navigate through the files system, list the contents of various folders, open files for editing (there are even file editors whose user interfaces are implemented in the terminal window rather than a separate GUI window), create directories, rename files/folders, move files/folders, deleting files/folders as well as displaying help for the various features/commands.

    Myshell is an example of an implementation of a terminal program written in c that emulates the functionality of a normal shell.  Since it runs in the terminal, a user's interaction consists of text based commands that the user inputs into the program followed by the associated response from the system.  Generally speaking, the results of the response from the system should have a corresponding response in the terminal window for the user to observe.   The myshell application has a smaller set of functions compared to the other shells.  Supported commands are: 1) mycd - a command used to change the currently active directory 2) myclear - which clears the terminal screen 3) myenviron - which prints out the system environment variables 4) myecho - which displays any comment on the screen which is input by the user 5) myhelp - which displays text explaining the myshell functions 6) mypause - that holds large text strings on the screen so the user can scroll though it 7) myquit - which quits the shell.  It should be noted that myshell acts as a supplement to the BASH/tcsh shell.  This means that myshell features are overlapping with some of the BASH/tcsh ones.  While myshell is running, the myshell implementation of that feature will be used while the BASH implementation won't.  However, for commands that are not implemented in myshell but are in BASH, those commands will be executed in BASH as a fork process.  Then control will be returned to the myshell process once the fork's execution is complete.  The myshell application shows how this functionality, typically performed by a system's shell, can be implemented in c.

======================
Algorithm
======================

[Procedure:]

1.    Start
1.1       declare *cmdin, **arglist, shell_location[255]
1.2.      shell_location = currentWorkingDirectory()
1.3.      set environment variable SHELL=shell_location
1.4       set os signals QUIT and INTERRUPT = default behavior

2.    print shell header
2.1       clearScreen( print "\033[H\033[J" )
             [Output:]  screen erased
2.2       print welcomescreen()
             [Output:]  string "Welcome to myShell"
2.3       set userName = environment variables("USER")
2.4       print "Logged in as: " userName
             [Output:]  string e.g. "Logged in as: rm7322"

3.    while(userInput != NULL)
3.1         prompt()
3.1.1             print(current working directory)
             [Output:]  string <cwd>  e.g. "/Users/rm7322/myshell$ "
        
             [Input:]   string <input> e.g. "myecho blueberry pancakes"
3.2         userInput = getUserInput(<input>)
3.2.1           declare *buffer, pos, c  = 0
3.2.2           while ((c = nextcharacter(<input>)) != EOF) {
3.2.2.1             if (c == '\n')
3.2.2.1.1               break while
3.2.2.2 			buffer = append(c);
3.2.3			if (c == EOF && position == 0)
3.2.3.1   			return NULL;
3.2.4			buffer = append('\0')
3.2.5			return buffer
3.2		    userInput = buffer

3.3         arguments = splitAtDelimiters(userInput)
3.3.1	        set i = 0; c = 0; j = 0, arguments[]
3.3.2           while (userInput[j] != " ")
3.3.2.1	            arguments[i] += getcharacter(userInput[c])
3.3.2.2		        c++
3.3.2.3             if(userInput[c] == " " )
3.3.2.3.1			    i++ 
3.3.3			arguments[i++]=NULL
3.3.4			return arguments

3.4.a       if arguments != NULL && 
3.4.b       if arguments[0] != "cd"||"quit"||"echo"||"ls"||"env"||"clear"|| "help"

             [Input assumed:] "myquit"
3.4.1            if (arguments[0] == "myquit")
3.4.1.1              exit(0)
             [output:]  program exits

             [Input assumed:] "mycd /bin"
3.4.2            if (arguments[0] == "mycd")
3.4.2.1              changeDirectory(arguments)
3.4.2.1.1                if sizeof(args)>2 print warn return fail
             [Output:] "Only one directory argument allowed" return 1
                       back to main prompt
3.4.2.1.2                if sizeof(args) == 2
3.4.2.1.2.1                 changeDirectory(arguments[1])
             [Output:] working directory changed to "/bin"
3.4.2.1.3                set environment var PWD=getcwd()
3.4.2.1.4                print CWD, PWD
             [Output:] "current working directory is: /bin; PWD: /bin"j                        

             [Input assumed:] "myecho peanuts are yummy"
3.4.4            if(arguments[0] == "myecho")
3.4.4.1             arguments[1] == userInput "peanuts are yummy"
3.4.4.2				execute as shown in 3.4.5.1
             [output:] "peanuts are yummy"
 
3.4.5            else
[Input assumed:] "mypause", "myclear", "myhelp", 
3.4.5.1             execute(arguments, shell_location)
3.4.5.1.1               location = shell_location + "/" + argv[0]
3.4.5.1.2      	        set os signals QUIT and INTERRUPT = ignore
3.4.5.1.3               fork() process
3.4.5.1.4               if fork() failed print "fork failed" and exit(1)
             [output:] "fork failed"  process exit = 1
3.4.5.1.4               if process is child process
3.4.5.1.4.1                set os sig QUIT and INTERRUPT = default behavior 
3.4.5.1.4.1                set environment var "PARENT=shell_location"
3.4.5.1.4.2                execute(process=args[0], parameters=args[1 to n])
3.4.5.1.4.3                if still executing perror and exit(1)
             [output:] "cannot execute command"  process exit = 1
3.4.5.1.5               else parent process 
3.4.5.1.5.1                wait(childExit == 0)
3.4.5.1.5.2                set os sig QUIT and INTERRUPT = default behavior 
3.4.5.1.5               return success

4.    return success

5.    end

======================
Analysis
======================

Alrorithm:                                 Analysis:

1. Start
1.1 declare *cmdin, 
	**arglist, shell_location          char *cmdin, **arglist, shell_location[255]
1.2 shell_location =                    
	currentWorkingDirectory()          shell_location = /Users/rm7322/myshell
1.3 set environment variable 
	SHELL=shell_location               envt var "SHELL=/Users/rm7322/myshell"
1.4 set os signals QUIT and INTERRUPT 
	= default behavior                 interrupt/quit signals allowed and default

2.  print shell header                   
2.1 print "\033[H\033[J"                   output: terminal screen erased
2.2 print welcomeText                      output: "Welcome to myShell"
                                                   "***if you're interested in help, type 'myhelp'"
2.3       set uName = environment 	   uName = rm7322
          variables("USER")
2.4       print userName           	   output: "Logged in as: rm7322"
                                                
3.  while((userInput=getInput(stdin) != NULL) 
3.1   getInput(stdin)                              
3.1.1 print ~current working directory$    output: "~/Users/rm7322/myshell$ " 
					   process waits


user enters text=>>>>>>>>>>>		   Input:  "mycd /bin"  ENTER

3.2  userInput = getUserInput(<input>)
3.2.1 declare c, buf                       c=buf=NULL 
3.2.2 while ((c = nextcharacter(<input>)). c="m"
              != EOF)
3.2.2.1   if (c == '\n').                  false
3.2.2.1.1    break while
3.2.2.2   buf = append(c)                  buf="m"
3.2.3	if (c == EOF && position == 0)     false
3.2.3.1   return NULL;
                                           c="y";buf="my"
                                           c="c";buf="myc"
                                           c="d";buf="mycd"
                                           c=" "; buf="mycd "  
                                           c="/"; buf="mycd /" 
                                           c="b"; buf="mycd /b"
                                           c="i"; buf="mycd /bi"
                                           c="n"; buf="mycd /bin"
                                           c="\n"; buf="mycd /bin"  break                                   

3.2.4  buf = append('\0')                  buf="mycd /bin\0"
3.2.5  return buf
3.2	 userInput = buf                   userInput="mycd /bin\0"
3.3  arguments= \                          
     splitAtDelimiters(userInput)
3.3.1   set i = j= c = 0; arguments[]      i=c=j=0, arguments[]=""
3.3.2   while (c= userInput[j] != " ")     c='m'    
3.3.2.1   arguments[i] += \                arguments[0]='m'
          getcharacter(userInput[c])
3.3.2.2	  c++                              c='y'
3.3.2.3   if(userInput[c] == " " )         false
3.3.2.3.1   i++ 
                                           j=0,c="y";arguments[0]="my"
                                           j=1,c="c";arguments[0]="myc"
                                           j=2,c="d";arguments[0]="mycd"
                                           j=3,c=" ";arguments[0]="mycd"; i=1 
                                           j=4,c="/";arguments[1]="/"
                                           j=5,c="b";arguments[1]="/b"
                                           j=6,c="i";arguments[1]="/bi"               
                                           j=7,c="n";arguments[1]="/bin"
                                           break   
3.3.3  args[c++] = NULL;                   arguments[2]=NULL
3.3.4  return arguments                    {"mycd","/bin", NULL}

3.1.a   if arguments != NULL &&            agruments={"mycd","/bin", NULL} 
3.1.b   if arguments[0] != "cd"            both statements = TRUE
	|| "quit" || "echo" || "ls" 
	|| "env" || "clear" || "help"

3.1.1   if (arguments[0] == "myquit")      FALSE
3.1.2   if (arguments[0] == "mycd")        TRUE
3.4.2.1  changeDirectory(arguments)
3.4.2.1.1   if sizeof(args)>2              FALSE
             print warn return fail
3.4.2.1.2   if sizeof(args) == 2           TRUE
3.4.2.1.2.1 changeDirectory(arguments[1])  "working directory changed to "/bin"
3.4.2.1.3 set environment variable \       *environment PWD=/bin
	       PWD=getcwd()
3.4.2.1.4   print CWD, PWD                 "current working directory is:    
                                              /bin; PWD: /bin"

user enters text=>>>>>>>>>>>               Input:  "myecho hello there"  ENTER

3.2  userInput = getUserInput(<input>)
3.2.1 declare c, buf                       c=buf=NULL 
3.2.2 while ((c = nextcharacter(<input>)). c="m"
              != EOF)
3.2.2.1   if (c == '\n').                  false
3.2.2.1.1    break while
3.2.2.2   buf = append(c)                  buf="m"
3.2.3	if (c == EOF && position == 0)     false
3.2.3.1   return NULL;
                                           c="y";buf="my"
                                           c="p";buf="mye"
                                           c="e";buf="myec"
                                           c="c";buf="myech"  
                                           ...
                                           c="e";buf="myecho hello there" 
                                           c="\n";buf="myecho hello there"
                                           break                                   

3.2.4  buf = append('\0')                  buf="myecho hello there\0"
3.2.5  return buf
3.2	 userInput = buf                   userInput="myecho hello there\0"
3.3  arguments= \                          
     splitAtDelimiters(userInput)
3.3.1   set i = j= c = 0; arguments[]      i=c=j=0, arguments[]=""
3.3.2   while (c= userInput[j] != " ")     c='m'    
3.3.2.1   arguments[i] += \                arguments[0]='m'
          getcharacter(userInput[c])
3.3.2.2	  c++                              c='y'
3.3.2.3   if(userInput[c] == " " )         false
3.3.2.3.1   i++ 
                                           j=0,c="y";arguments[0]="my"
                                           j=1,c="e";arguments[0]="mye"
                                           j=2,c="c";arguments[0]="myec"
                                           j=3,c="h";arguments[0]="myech"
                                           j=4,c="o";arguments[0]="myecho"
                                           j=5,c=" ";arguments[1]="myecho"; i=1
                                           j=6,c="h";arguments[1]="h"
                                           j=7,c="e";arguments[1]="he"
                                           j=8,c="l";arguments[1]="hel"
                                           j=9,c="l";arguments[1]="hell"
                                           j=10,c="0";arguments[1]="hello"
                                           j=11,c=" ";arguments[1]="hello"; i=2
                                           ...
                                           j=17,c="e";arguments[2]="there"
                                           j=18,c="\0"
                                           break   
3.3.3  args[c++] = NULL;                   arguments[3]=NULL
3.3.4   return arguments                   {"myecho","hello","there",NULL}

3.1.a   if arguments != NULL &&            agruments={"myecho", "hello", "there",NULL} 
3.1.b   if arguments[0] != "cd"            both statements = TRUE
        || "quit" || "echo" || "ls" 
        || "env" || "clear" || "help"

3.1.1   if (arguments[0] == "myquit")      FALSE
3.1.2   if (arguments[0] == "mycd")        FALSE
3.1.3   if (arguments[0] == "myecho")      TRUE
3.1.3.1    arguments[1] = userInput        arguments[1]="myecho hello there\0"

3.4.5.1 execute(arguments, shell_location)
3.4.5.1.1 location = shell_location \
          + "/" + argv[0]                  shell_location="/Users/rm7322/myshell/myecho"
3.4.5.1.2 set os signals QUIT/INTERRUPT \
          = ignore                         os interrupt and stop signal ignored
3.4.5.1.3 fork() process
3.4.5.1.4 if fork() failed print 
            "fork failed" and exit(1)      FALSE
3.4.5.1.4 if process is child process
3.4.5.1.4.1 set os sig QUIT/INTERRUPT 
             = default behavior            os interrupt and stop signal ON for child
3.4.5.1.4.1 set environment var 
            "PARENT=shell_location"        PARENT="/Users/rm7322/myshell"

3.4.5.1.4.2 execute(arguments)             [output:] "hello there"

3.4.5.1.4.3 if still alive perror/exit(1)  FALSE
3.4.5.1.5 else parent process 
3.4.5.1.5.1 wait(childExit == 0)
3.4.5.1.5.2 set os sig QUIT/INTERRUPT 
            = default behavior             os interrupt and stop signals ON for parent
3.4.5.1.5  return 0                        return success
 

user enters text=>>>>>>>>>>>		   Input:  "mydir /bin"  ENTER

3.2  userInput = getUserInput(<input>)
3.2.1 declare c, buf                       c=buf=NULL 
3.2.2 while ((c = nextcharacter(<input>)). c="m"
              != EOF)
3.2.2.1   if (c == '\n').                  false
3.2.2.1.1    break while
3.2.2.2   buf = append(c)                  buf="m"
3.2.3	if (c == EOF && position == 0)     false
3.2.3.1   return NULL;
                                           c="y";buf="my"
                                           c="d";buf="myd"
                                           c="i";buf="mydi"
                                           c="r"; buf="mydir" 
                                           c=" "; buf="mydir "   
                                           c="/"; buf="mydir /" 
                                           c="b"; buf="mydir /b"
                                           c="i"; buf="mydir /bi"
                                           c="n"; buf="mydir /bin"
                                           c="\n"; buf="mydir /bin"  
                                           break                                   

3.2.4  buf = append('\0')                  buf="mydir /bin\0"
3.2.5  return buf
3.2	 userInput = buf                   userInput="mydir /bin\0"
3.3  arguments= \                          
     splitAtDelimiters(userInput)
3.3.1   set i = j= c = 0; arguments[]      i=c=j=0, arguments[]=""
3.3.2   while (c= userInput[j] != " ")     c='m'    
3.3.2.1   arguments[i] += \                arguments[0]='m'
          getcharacter(userInput[c])
3.3.2.2	  c++                              c='y'
3.3.2.3   if(userInput[c] == " " )         false
3.3.2.3.1   i++ 
                                           j=0,c="y";arguments[0]="my"
                                           j=1,c="d";arguments[0]="myd"
                                           j=2,c="i";arguments[0]="mydi"
                                           j=3,c="r";arguments[0]="mydir"
                                           j=4,c=" ";arguments[0]="mydir"; i=1 
                                           j=5,c="/";arguments[1]="/"
                                           j=6,c="b";arguments[1]="/b"
                                           j=7,c="i";arguments[1]="/bi"               
                                           j=8,c="n";arguments[1]="/bin"
                                           break   
3.3.3  args[c++] = NULL;                   arguments[2]=NULL
3.3.4  return arguments                    {"mydir","/bin", NULL}

3.1.a  if arguments != NULL &&             agruments={"mydir","/bin", NULL} 
3.1.b  if arguments[0] != "cd"             both statements = TRUE
	|| "quit" || "echo" || "ls" 
	|| "env" || "clear" || "help"
3.1.1   if (arguments[0] == "myquit")      FALSE
3.1.2   if (arguments[0] == "mycd")        FALSE
3.1.3   if (arguments[0] == "myecho")      FALSE

3.4.5.1 execute(arguments, shell_location)
3.4.5.1.1 location = shell_location \
          + "/" + argv[0]                  shell_location="/Users/rm7322/myshell/mydir"
3.4.5.1.2 set os signals QUIT/INTERRUPT \
          = ignore                         os interrupt and stop signal ignored
3.4.5.1.3 fork() process
3.4.5.1.4 if fork() failed print 
            "fork failed" and exit(1)      FALSE
3.4.5.1.4 if process is child process
3.4.5.1.4.1 set os sig QUIT/INTERRUPT 
             = default behavior            os interrupt and stop signal ON for child
3.4.5.1.4.1 set environment var 
            "PARENT=shell_location"        PARENT="/Users/rm7322/myshell"

3.4.5.1.4.2 execute(arguments)             [output:] **listing of files/folders in /bin directory

3.4.5.1.4.3 if still alive perror/exit(1)  FALSE
3.4.5.1.5 else parent process 
3.4.5.1.5.1 wait(childExit == 0)
3.4.5.1.5.2 set os sig QUIT/INTERRUPT 
            = default behavior             os interrupt and stop signals ON for parent
3.4.5.1.5  return 0                        return success

user enters text=>>>>>>>>>>>		   Input:  "myenviron"  ENTER

3.2  userInput = getUserInput(<input>)
3.2.1 declare c, buf                       c=buf=NULL 
3.2.2 while ((c = nextcharacter(<input>)). c="m"
              != EOF)
3.2.2.1   if (c == '\n').                  false
3.2.2.1.1    break while
3.2.2.2   buf = append(c)                  buf="m"
3.2.3	if (c == EOF && position == 0)     false
3.2.3.1   return NULL;
                                           c="y";buf="my"
                                           c="e";buf="mye"
                                           c="n";buf="myen"
                                           c="v"; buf="myenv" 
                                           c="I"; buf="myenvi"   
                                           c="r"; buf="myenvir" 
                                           c="o"; buf="myenviro"
                                           c="n"; buf="myenviron"
                                           c="\n"; buf="myenviron"  
                                           break                                   

3.2.4  buf = append('\0')                  buf="mydir /bin\0"
3.2.5  return buf
3.2	 userInput = buf                   userInput="mydir /bin\0"
3.3  arguments= \                          
     splitAtDelimiters(userInput)
3.3.1   set i = j= c = 0; arguments[]      i=c=j=0, arguments[]=""
3.3.2   while (c= userInput[j] != " ")     c='m'    
3.3.2.1   arguments[i] += \                arguments[0]='m'
          getcharacter(userInput[c])
3.3.2.2	  c++                              c='y'
3.3.2.3   if(userInput[c] == " " )         false
3.3.2.3.1   i++ 
                                           j=0,c="y";arguments[0]="my"
                                           j=1,c="e";arguments[0]="mye"
                                           j=2,c="n";arguments[0]="myen"
                                           j=3,c="v";arguments[0]="myenv"
                                           j=4,c="I";arguments[0]="myenvi"
                                           j=5,c="r";arguments[0]="myenvir"
                                           j=6,c="o";arguments[0]="myenviro"
                                           j=7,c="n";arguments[0]="myenviron"               
                                           break   
3.3.3  args[c++] = NULL;                   arguments[2]=NULL
3.3.4  return arguments                    {"myenviron", NULL}

3.1.a  if arguments != NULL &&             agruments={"myenviron", NULL} 
3.1.b  if arguments[0] != "cd"             both statements = TRUE
	|| "quit" || "echo" || "ls" 
	|| "env" || "clear" || "help"
3.1.1   if (arguments[0] == "myquit")      FALSE
3.1.2   if (arguments[0] == "mycd")        FALSE
3.1.3   if (arguments[0] == "myecho")      FALSE

3.4.5.1 execute(arguments, shell_location)
3.4.5.1.1 location = shell_location \
          + "/" + argv[0]                  shell_location="/Users/rm7322/myshell/mydenviron"
3.4.5.1.2 set os signals QUIT/INTERRUPT \
          = ignore                         os interrupt and stop signal ignored
3.4.5.1.3 fork() process
3.4.5.1.4 if fork() failed print 
            "fork failed" and exit(1)      FALSE
3.4.5.1.4 if process is child process
3.4.5.1.4.1 set os sig QUIT/INTERRUPT 
             = default behavior            os interrupt and stop signal ON for child
3.4.5.1.4.1 set environment var 
            "PARENT=shell_location"        PARENT="/Users/rm7322/myshell"

3.4.5.1.4.2 execute(arguments)             [output:] **listing all environment variables

3.4.5.1.4.3 if still alive perror/exit(1)  FALSE
3.4.5.1.5 else parent process 
3.4.5.1.5.1 wait(childExit == 0)
3.4.5.1.5.2 set os sig QUIT/INTERRUPT 
            = default behavior             os interrupt and stop signals ON for parent
3.4.5.1.5  return 0                        return success

user enters text=>>>>>>>>>>>		   Input:  "myclean"  ENTER

3.2  userInput = getUserInput(<input>)
3.2.1 declare c, buf                       c=buf=NULL 
3.2.2 while ((c = nextcharacter(<input>)). c="m"
              != EOF)
3.2.2.1   if (c == '\n').                  false
3.2.2.1.1    break while
3.2.2.2   buf = append(c)                  buf="m"
3.2.3	if (c == EOF && position == 0)     false
3.2.3.1   return NULL;
                                           c="y";buf="my"
                                           c="c";buf="myc"
                                           c="l";buf="mycl"
                                           c="e";buf="mycle" 
                                           c="a";buf="myclea"   
                                           c="r";buf="myclear" 
                                           c="\n";buf="myclear"  
                                           break                                   

3.2.4  buf = append('\0')                  buf="myclear\0"
3.2.5  return buf
3.2	 userInput = buf                   userInput="myclear\0"
3.3  arguments= \                          
     splitAtDelimiters(userInput)
3.3.1   set i = j= c = 0; arguments[]      i=c=j=0, arguments[]=""
3.3.2   while (c= userInput[j] != " ")     c='m'    
3.3.2.1   arguments[i] += \                arguments[0]='m'
          getcharacter(userInput[c])
3.3.2.2	  c++                              c='y'
3.3.2.3   if(userInput[c] == " " )         false
3.3.2.3.1   i++ 
                                           j=0,c="y";arguments[0]="my"
                                           j=1,c="c";arguments[0]="myc"
                                           j=2,c="l";arguments[0]="mycl"
                                           j=3,c="e";arguments[0]="mycle"
                                           j=4,c="a";arguments[0]="myclea" 
                                           j=5,c="r";arguments[0]="myclear"
                                           break   
3.3.3  args[c++] = NULL;                   arguments[1]=NULL
3.3.4  return arguments                    {"myclear",NULL}

3.1.a  if arguments != NULL &&             agruments={"myclear",NULL} 
3.1.b  if arguments[0] != "cd"             both statements = TRUE
	|| "quit" || "echo" || "ls" 
	|| "env" || "clear" || "help"
3.1.1   if (arguments[0] == "myquit")      FALSE
3.1.2   if (arguments[0] == "mycd")        FALSE
3.1.3   if (arguments[0] == "myecho")      FALSE

3.4.5.1 execute(arguments, shell_location)
3.4.5.1.1 location = shell_location \
          + "/" + argv[0]                  shell_location="/Users/rm7322/myshell/myclear"
3.4.5.1.2 set os signals QUIT/INTERRUPT \
          = ignore                         os interrupt and stop signal ignored
3.4.5.1.3 fork() process
3.4.5.1.4 if fork() failed print 
            "fork failed" and exit(1)      FALSE
3.4.5.1.4 if process is child process
3.4.5.1.4.1 set os sig QUIT/INTERRUPT 
             = default behavior            os interrupt and stop signal ON for child
3.4.5.1.4.1 set environment var 
            "PARENT=shell_location"        PARENT="/Users/rm7322/myshell"

3.4.5.1.4.2 execute(arguments)             [output:] **terminal display cleared

3.4.5.1.4.3 if still alive perror/exit(1)  FALSE
3.4.5.1.5 else parent process 
3.4.5.1.5.1 wait(childExit == 0)
3.4.5.1.5.2 set os sig QUIT/INTERRUPT 
            = default behavior             os interrupt and stop signals ON for parent
3.4.5.1.5  return 0                        return success

user enters text=>>>>>>>>>>>		   Input:  "mypause"  ENTER

3.2  userInput = getUserInput(<input>)
3.2.1 declare c, buf                       c=buf=NULL 
3.2.2 while ((c = nextcharacter(<input>)). c="m"
              != EOF)
3.2.2.1   if (c == '\n').                  false
3.2.2.1.1    break while
3.2.2.2   buf = append(c)                  buf="m"
3.2.3	if (c == EOF && position == 0)     false
3.2.3.1   return NULL;
                                           c="y";buf="my"
                                           c="p";buf="myp"
                                           c="a";buf="mypa"
                                           c="u"; buf="mypau"  
                                           c="s"; buf="mypaus" 
                                           c="e"; buf="mypause"
                                           c="\n"; buf="mypause"  break                                   

3.2.4  buf = append('\0')                  buf="mypause\0"
3.2.5  return buf
3.2	 userInput = buf                   userInput="mypause\0"
3.3  arguments= \                          
     splitAtDelimiters(userInput)
3.3.1   set i = j= c = 0; arguments[]      i=c=j=0, arguments[]=""
3.3.2   while (c= userInput[j] != " ")     c='m'    
3.3.2.1   arguments[i] += \                arguments[0]='m'
          getcharacter(userInput[c])
3.3.2.2	  c++                              c='y'
3.3.2.3   if(userInput[c] == " " )         false
3.3.2.3.1   i++ 
                                           j=0,c="y";arguments[0]="my"
                                           j=1,c="p";arguments[0]="myp"
                                           j=2,c="a";arguments[0]="mypa"
                                           j=3,c="u";arguments[0]="mypau"
                                           j=4,c="s";arguments[0]="mypaus"
                                           j=5,c="e";arguments[1]="mypause"
                                           break   
3.3.3  args[c++] = NULL;                   arguments[2]=NULL
3.3.4  return arguments                    {"mypause",NULL}

3.1.a   if arguments != NULL &&            agruments={"mypause",NULL} 
3.1.b   if arguments[0] != "cd"            both statements = TRUE
        || "quit" || "echo" || "ls" 
        || "env" || "clear" || "help"

3.1.1   if (arguments[0] == "myquit")      FALSE
3.1.2   if (arguments[0] == "mycd")        FALSE
3.4.3.1   pause()
3.4.3.1.1   prompt "press enter"           [output:]  "press enter"
                                           [input:]   ENTER
3.4.3.1.2 return 0                         return success         

user enters text=>>>>>>>>>>>               Input:  "myquit"  ENTER

3.2  userInput = getUserInput(<input>)
3.2.1 declare c, buf                       c=buf=NULL 
3.2.2 while ((c = nextcharacter(<input>))  c="m"
              != EOF)
3.2.2.1   if (c == '\n').                  false
3.2.2.1.1    break while
3.2.2.2   buf = append(c)                  buf="m"
3.2.3	if (c == EOF && position == 0)     false
3.2.3.1   return NULL;
                                           c="y";buf="my"
                                           c="q";buf="myq"
                                           c="u";buf="myqu"
                                           c="i"; buf="myqui"  
                                           c="t"; buf="myquit"                     
                                           c="\n"; buf="myquit"  break                                   

3.2.4  buf = append('\0')                  buf="myquit\0"
3.2.5  return buf
3.2  userInput = buf                       userInput="myquit\0"

3.3  arguments=  \
     splitAtDelimiters(userInput)
3.3.1   set i = 0; c = 0; arguments[]      i=c=0, arguments[]=""
3.3.2   while (c= userInput[j] != " ")     c='m'    
3.3.2.1   arguments[i] += \                arguments[0]='m'
          getcharacter(userInput[c])
3.3.2.2	  c++                              c='y'
3.3.2.3   if(userInput[c] == " " )         false
3.3.2.3.1   i++ 
                                           c="y";arguments[0]="my"
                                           c="q";arguments[0]="myq"
                                           c="u";arguments[0]="myqu"
                                           c="i";arguments[0]="myqui"  
                                           c="t";arguments[0]="myquit"
                                           c=" "
                                           break   
3.3.3  args[c++] = NULL;                   arguments[1]=NULL
3.3.4  return arguments                    

3.1.a   if arguments != NULL &&            agruments={"myquit","NULL"} 
3.1.b   if arguments[0] != "cd"            both statements = TRUE
        || "quit" || "echo" || "ls" 
        || "env" || "clear" || "help"

3.1.1   if (arguments[0] == "myquit")      arguments[0] == "myquit" is TRUE
3.1.1.1   exit(0)                          ./myshell exits, 0 = success

======================
Experiments
======================

myShell~/home/rm7322/fall2018$ mycd /home
current working directory [getcwd()] is: /home,  getenv("PWD") is: /home
myShell~/home$ 

myShell~/home$ mydir
ss9449
sm4196
kc4107
rm7322
es7254
cslab
sk2508
tw1168
mc6672
.
..
am5787
nn1073
rr5620
sv8849
myShell~/home$ 

myShell~/home/rm7322/fall2018/myshell$ mypause
press enter to continue
myShell~/home/rm7322/fall2018/myshell$ 

myShell~/home/rm7322/fall2018/myshell$
***terminal cleared of text ***

myShell~/home/rm7322/fall2018/myshell$ myecho testing reply
testing reply 
myShell~/home/rm7322/fall2018/myshell$ 

myShell~/home/rm7322/fall2018/myshell$ myenviron
SSH_CONNECTION=157.160.36.11 41092 157.160.37.163 22
CDC_PREW2KHOST=mct263l03
LANG=en_US.UTF-8
CDC_JOINED_ZONE=DC=cs,DC=ship,DC=edu
JAVA_HOME=/usr/lib/jvm/java-10-oracle
J2SDKDIR=/usr/lib/jvm/java-10-oracle
CDC_LOCALHOST=mct263l03.cs.ship.edu
XDG_SESSION_ID=169
DERBY_HOME=/usr/lib/jvm/java-10-oracle/db
USER=rm7322
PWD=/home/rm7322/fall2018/myshell
HOME=/home/rm7322
J2REDIR=/usr/lib/jvm/java-10-oracle
SSH_CLIENT=157.160.36.11 41092 22
KRB5CCNAME=FILE:/tmp/krb5cc_721426013
XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop
SSH_TTY=/dev/pts/0
DA_SESSION_ID_AUTH=2bd027e4-5a44-da4a-b216-bd14b1d25a79
MAIL=/var/mail/rm7322
TERM=xterm-256color
SHELL=/home/rm7322/fall2018/myshell
CDC_JOINED_DC=dserv.cs.ship.edu
SHLVL=1
CDC_JOINED_DOMAIN=cs.ship.edu
LOGNAME=rm7322
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/721426013/bus
XDG_RUNTIME_DIR=/run/user/721426013
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/opt/gradle-4.8/bin:/snap/bin:/usr/lib/jvm/java-10-oracle/bin:/usr/lib/jvm/java-10-oracle/db/bin
USER_PRINCIPAL_NAME=rm7322@CS.SHIP.EDU
CDC_JOINED_SITE=Default-First-Site-Name
_=./myshell
OLDPWD=/home/rm7322
PARENT=/home/rm7322/fall2018/myshell
myShell~/home/rm7322/fall2018/myshell$ 


myShell~/home/rm7322/fall2018/myshell$ myhelp mydir
### mydir <directory>
      
Supports the ability for the user to display the contents of a specific folder.  On it's execution, this command lists the contents of directory <directory> where <directory> is the directory location entered as a parameter.  The function will list the files and folders in the directory of question.  If no target <directory> parameter is entere

[...]

myShell~/home$ echo
command disabled, instead try one of: 
mycd, myclear, mydir, myenviron, myecho, myhelp, mypause, myquit
myShell~/home$ clear
command disabled, instead try one of: 
mycd, myclear, mydir, myenviron, myecho, myhelp, mypause, myquit
myShell~/home$ ls
command disabled, instead try one of: 
mycd, myclear, mydir, myenviron, myecho, myhelp, mypause, myquit
myShell~/home$ cd 
command disabled, instead try one of: 
mycd, myclear, mydir, myenviron, myecho, myhelp, mypause, myquit
myShell~/home$ help
command disabled, instead try one of: 
mycd, myclear, mydir, myenviron, myecho, myhelp, mypause, myquit
myShell~/home$ 

myShell~/home/rm7322/fall2018/myshell$ myquit
rm7322@mct263l03:~/fall2018/myshell$ 

======================
Analysis of Experiments
======================

Based on the performance that we can see from the previously outlined experiments, it can be concluded that the myshell program shown in this project does indeed illustrate an implementation of a shell type program can perform tasks that it is intended to.   

======================
Conclusion
======================

The program developed here is for implementing a shell or command line interpreter.  It's purpose is to demonstrate an implemenation of a user interface that would be fundamental to the operating system which allows the execution of certain functionality.  This shell, called myshell, includes the implementation of mycd - to change directory, myclr - to clear the terminal screen, mydir - to list directory contents, myenviron - list environment strings, myecho - to print comments, myhelp - to show myshell help, mypause - to pause the program and myquit - to quit the program.  

Based on the successful execution of the experiments described above and the analysis of experiments, this implementation achieves what the aim of performing as a simple shell.

Bugs: During testing on the linux environment computer, it was noted that occasionally the current working directory string was not able to be acquired.  This was not found on Mac OS.

======================
References
======================

[1] getcwd(), http://pubs.opengroup.org/onlinepubs/9699919799/functions/getcwd.html,
The Open Group Base Specifications Issue 7, 2018 edition, 
IEEE Std 1003.1-2017 (Revision of IEEE Std 1003.1-2008)

[2] Molay, Bruce. Understanding Unix/Linux Programming, A guide to Theory and Practice. 2003. Chapter 9 source code